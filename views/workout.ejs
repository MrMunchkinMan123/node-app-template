<div class="page-header">
    <h1>Workout Tracker</h1>
    <p>Log your exercises and track your progress.</p>
    <button class="btn" onclick="openCreateWorkoutModal()" style="margin-top: 1rem; padding: 0.5rem 1rem; font-size: 0.9rem;">
        ➕ New Workout
    </button>
</div>

<div class="card">
    <h3>Workout History</h3>
    <div id="workout-history">
        <p>Loading workout history...</p>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="toast"></div>

<!-- Confirmation Dialog -->
<div id="confirm-dialog" class="modal">
    <div class="modal-content" style="max-width: 400px;">
        <div class="modal-header">
            <h2>Confirm Delete</h2>
        </div>
        <div class="modal-body">
            <p id="confirm-message"></p>
        </div>
        <div class="modal-footer">
            <button class="btn" onclick="closeConfirmDialog()" style="background: #6b7280;">Cancel</button>
            <button class="btn" onclick="confirmDeleteAction()" style="background: var(--error);">Delete</button>
        </div>
    </div>
</div>

<!-- Create Workout Modal -->
<div id="create-workout-modal" class="modal">
    <div class="modal-content" style="max-width: 800px;">
        <div class="modal-header">
            <h2>Create New Workout</h2>
            <span class="close" onclick="closeCreateWorkoutModal()">&times;</span>
        </div>
        <div class="modal-body">
            <form id="workout-form">
                <div class="form-group">
                    <label for="workout-name">Workout Name</label>
                    <input type="text" id="workout-name" placeholder="e.g., Morning Routine" required>
                </div>
                
                <div class="form-group">
                    <label for="exercise-category">Exercise Category</label>
                    <select id="exercise-category" required>
                        <option value="">Select Category</option>
                        <option value="strength">Strength Training</option>
                        <option value="cardio">Cardio</option>
                        <option value="flexibility">Flexibility</option>
                        <option value="bodyweight">Bodyweight</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="exercise-name">Exercise</label>
                    <select id="exercise-name" required disabled>
                        <option value="">First select a category</option>
                    </select>
                </div>

                <div id="dynamic-fields"></div>

                <button type="submit" class="btn">Add Exercise</button>
            </form>

            <div id="current-workout" style="margin-top: 1.5rem;">
                <h4 style="color: #6b7280; margin-bottom: 0.5rem;">Current Workout Exercises</h4>
                <p style="color: #9ca3af;">No exercises added yet.</p>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn" onclick="closeCreateWorkoutModal()" style="background: #6b7280;">Cancel</button>
            <button class="btn btn-secondary" id="save-workout-btn">💾 Save Workout</button>
        </div>
    </div>
</div>

<!-- View Workout Modal -->
<div id="workout-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modal-workout-name">Workout</h2>
            <span class="close" onclick="closeWorkoutModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div id="modal-exercises"></div>
        </div>
    </div>
</div>

<style>
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    overflow-y: auto;
}

.modal-content {
    background-color: var(--card-bg);
    margin: 2% auto;
    padding: 0;
    border-radius: 10px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    animation: slideDown 0.3s ease;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
}

@keyframes slideDown {
    from {
        transform: translateY(-50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
}

.modal-header h2 {
    margin: 0;
    color: var(--primary);
}

.close {
    color: #6b7280;
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s;
    line-height: 1;
}

.close:hover {
    color: var(--error);
}

.modal-body {
    padding: 1.5rem;
    overflow-y: auto;
    flex: 1;
}

.modal-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--border);
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    flex-shrink: 0;
}

.workout-history-item {
    cursor: pointer;
    padding: 1rem;
    background: var(--background);
    border-radius: 5px;
    margin-bottom: 0.75rem;
    transition: all 0.2s;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.workout-history-item:hover {
    transform: translateX(5px);
    background: var(--card-bg) !important;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.workout-info {
    flex: 1;
}

.workout-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.delete-btn {
    background: var(--error);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
    font-size: 0.9rem;
}

.delete-btn:hover {
    background: #b91c1c;
}

.view-btn {
    color: var(--primary);
    font-size: 1.5rem;
    cursor: pointer;
}

.exercise-item {
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: var(--background);
    border-radius: 5px;
    margin-bottom: 0.5rem;
}

.exercise-item .btn {
    width: 40px;
    height: 40px;
    padding: 0;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-exercise-item {
    padding: 1rem;
    background: var(--background);
    border-radius: 5px;
    margin-bottom: 0.75rem;
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
    gap: 1rem;
}

.modal-exercise-item .btn {
    width: 90px;
    height: 40px;
    padding: 0;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    justify-content: center;
}


.badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    margin-left: 0.5rem;
}

.toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--primary);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    display: none;
    align-items: center;
    gap: 0.5rem;
    z-index: 2000;
    animation: slideInRight 0.3s ease;
    max-width: 400px;
}

.toast.show {
    display: flex;
}

.toast.success {
    background: var(--success);
}

.toast.error {
    background: var(--error);
}

.toast.warning {
    background: var(--warning);
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    setActiveNav('workout');
    
    let currentExercises = [];
    let currentWorkoutData = null;
    let completedCount = 0;
    let pendingDeleteWorkout = null;

    const exerciseDatabase = {
        strength: [
            { name: 'Bench Press', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Deadlift', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Squat', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Overhead Press', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Barbell Row', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Dumbbell Curl', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Tricep Extension', type: 'strength', fields: ['sets', 'reps', 'weight'] },
            { name: 'Leg Press', type: 'strength', fields: ['sets', 'reps', 'weight'] }
        ],
        cardio: [
            { name: 'Running', type: 'cardio', fields: ['duration', 'distance'] },
            { name: 'Cycling', type: 'cardio', fields: ['duration', 'distance'] },
            { name: 'Swimming', type: 'cardio', fields: ['duration', 'distance'] },
            { name: 'Rowing Machine', type: 'cardio', fields: ['duration', 'distance'] },
            { name: 'Jump Rope', type: 'cardio', fields: ['duration'] },
            { name: 'Elliptical', type: 'cardio', fields: ['duration'] },
            { name: 'Stair Climber', type: 'cardio', fields: ['duration'] }
        ],
        flexibility: [
            { name: 'Yoga', type: 'flexibility', fields: ['duration'] },
            { name: 'Stretching', type: 'flexibility', fields: ['duration'] },
            { name: 'Pilates', type: 'flexibility', fields: ['duration'] },
            { name: 'Foam Rolling', type: 'flexibility', fields: ['duration'] }
        ],
        bodyweight: [
            { name: 'Push-ups', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Pull-ups', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Dips', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Bodyweight Squats', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Lunges', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Plank', type: 'bodyweight', fields: ['duration'] },
            { name: 'Burpees', type: 'bodyweight', fields: ['sets', 'reps'] },
            { name: 'Mountain Climbers', type: 'bodyweight', fields: ['sets', 'reps'] }
        ]
    };

    function showToast(message, type = 'success') {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = 'toast ' + type + ' show';
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    function showConfirmDialog(message, callback) {
        document.getElementById('confirm-message').textContent = message;
        document.getElementById('confirm-dialog').style.display = 'block';
        pendingDeleteWorkout = callback;
    }

    function closeConfirmDialog() {
        document.getElementById('confirm-dialog').style.display = 'none';
        pendingDeleteWorkout = null;
    }

    function confirmDeleteAction() {
        if (pendingDeleteWorkout) {
            pendingDeleteWorkout();
        }
        closeConfirmDialog();
    }

    window.closeConfirmDialog = closeConfirmDialog;
    window.confirmDeleteAction = confirmDeleteAction;

    function openCreateWorkoutModal() {
        document.getElementById('create-workout-modal').style.display = 'block';
    }

    function closeCreateWorkoutModal() {
        document.getElementById('create-workout-modal').style.display = 'none';
        currentExercises = [];
        document.getElementById('workout-form').reset();
        document.getElementById('dynamic-fields').innerHTML = '';
        document.getElementById('exercise-name').disabled = true;
        displayCurrentWorkout();
    }

    window.openCreateWorkoutModal = openCreateWorkoutModal;
    window.closeCreateWorkoutModal = closeCreateWorkoutModal;

    function updateExerciseList() {
        const category = document.getElementById('exercise-category').value;
        const exerciseSelect = document.getElementById('exercise-name');
        const dynamicFields = document.getElementById('dynamic-fields');
        
        exerciseSelect.innerHTML = '<option value="">Select Exercise</option>';
        dynamicFields.innerHTML = '';
        
        if (category && exerciseDatabase[category]) {
            exerciseSelect.disabled = false;
            exerciseDatabase[category].forEach(exercise => {
                const option = document.createElement('option');
                option.value = JSON.stringify(exercise);
                option.textContent = exercise.name;
                exerciseSelect.appendChild(option);
            });
        } else {
            exerciseSelect.disabled = true;
        }
    }

    function updateFormFields() {
        const exerciseSelect = document.getElementById('exercise-name');
        const dynamicFields = document.getElementById('dynamic-fields');
        
        if (!exerciseSelect.value) {
            dynamicFields.innerHTML = '';
            return;
        }
        
        const exercise = JSON.parse(exerciseSelect.value);
        let html = '';
        
        if (exercise.fields.includes('sets')) {
            html += `
                <div class="form-group">
                    <label for="sets">Sets</label>
                    <input type="number" id="sets" min="1" value="3" required>
                </div>
            `;
        }
        
        if (exercise.fields.includes('reps')) {
            html += `
                <div class="form-group">
                    <label for="reps">Reps</label>
                    <input type="number" id="reps" min="1" value="10" required>
                </div>
            `;
        }
        
        if (exercise.fields.includes('weight')) {
            html += `
                <div class="form-group">
                    <label for="weight">Weight (lbs)</label>
                    <input type="number" id="weight" min="0" step="5" value="0">
                </div>
            `;
        }
        
        if (exercise.fields.includes('duration')) {
            html += `
                <div class="form-group">
                    <label for="duration">Duration (minutes)</label>
                    <input type="number" id="duration" min="1" value="30" required>
                </div>
            `;
        }
        
        if (exercise.fields.includes('distance')) {
            html += `
                <div class="form-group">
                    <label for="distance">Distance (miles)</label>
                    <input type="number" id="distance" min="0" step="0.1" value="0">
                </div>
            `;
        }
        
        dynamicFields.innerHTML = html;
    }

    function handleWorkoutSubmit(event) {
        event.preventDefault();
        
        const exerciseSelect = document.getElementById('exercise-name');
        if (!exerciseSelect.value) {
            showToast('Please select an exercise', 'warning');
            return;
        }
        
        const exerciseData = JSON.parse(exerciseSelect.value);
        const exercise = {
            name: exerciseData.name,
            type: exerciseData.type,
            category: document.getElementById('exercise-category').value
        };
        
        exerciseData.fields.forEach(field => {
            const input = document.getElementById(field);
            if (input) {
                exercise[field] = input.value;
            }
        });
        
        currentExercises.push(exercise);
        displayCurrentWorkout();
        
        document.getElementById('dynamic-fields').innerHTML = '';
        document.getElementById('exercise-category').value = '';
        document.getElementById('exercise-name').value = '';
        document.getElementById('exercise-name').disabled = true;
    }

    function displayCurrentWorkout() {
        const container = document.getElementById('current-workout');
        
        if (currentExercises.length === 0) {
            container.innerHTML = '<h4 style="color: #6b7280; margin-bottom: 0.5rem;">Current Workout Exercises</h4><p style="color: #9ca3af;">No exercises added yet.</p>';
            return;
        }
        
        const html = `
            <h4 style="color: #6b7280; margin-bottom: 0.5rem;">Current Workout Exercises (${currentExercises.length})</h4>
            ${currentExercises.map((ex, index) => {
                let details = '';
                if (ex.sets) details += `${ex.sets} sets`;
                if (ex.reps) details += ` × ${ex.reps} reps`;
                if (ex.weight && ex.weight > 0) details += ` @ ${ex.weight} lbs`;
                if (ex.duration) details += `${ex.duration} min`;
                if (ex.distance && ex.distance > 0) details += ` • ${ex.distance} mi`;
                
                return `
                    <div class="exercise-item">
                        <div style="flex: 1;">
                            <strong>${ex.name}</strong>
                            <span class="badge badge-primary">${ex.category}</span>
                            <br>
                            <small>${details}</small>
                        </div>
                        <button onclick="window.removeExercise(${index})" class="btn" style="background: var(--error);">✕</button>
                    </div>
                `;
            }).join('')}
        `;
        
        container.innerHTML = html;
    }

    window.removeExercise = function(index) {
        currentExercises.splice(index, 1);
        displayCurrentWorkout();
    }

    async function saveWorkout() {
        if (currentExercises.length === 0) {
            showToast('Please add at least one exercise', 'warning');
            return;
        }
        
        const workoutName = document.getElementById('workout-name').value;
        if (!workoutName.trim()) {
            showToast('Please enter a workout name', 'warning');
            return;
        }
        
        const token = localStorage.getItem('jwtToken');
        
        try {
            const response = await fetch('/api/workouts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': token
                },
                body: JSON.stringify({
                    name: workoutName,
                    exercises: currentExercises,
                    date: new Date().toISOString()
                })
            });
            
            if (response.ok) {
                showToast('💪 Workout saved successfully!', 'success');
                closeCreateWorkoutModal();
                loadWorkoutHistory();
            } else {
                showToast('Failed to save workout', 'error');
            }
        } catch (error) {
            console.error('Error saving workout:', error);
            showToast('Network error occurred', 'error');
        }
    }

    async function deleteWorkout(workoutId, workoutName, event) {
        event.stopPropagation();
        
        showConfirmDialog(`Are you sure you want to delete "${workoutName}"?`, async () => {
            const token = localStorage.getItem('jwtToken');
            
            try {
                const response = await fetch(`/api/workouts/${workoutId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (response.ok) {
                    showToast('Workout deleted successfully', 'success');
                    loadWorkoutHistory();
                } else {
                    showToast('Failed to delete workout', 'error');
                }
            } catch (error) {
                console.error('Error deleting workout:', error);
                showToast('Network error occurred', 'error');
            }
        });
    }

    window.deleteWorkout = deleteWorkout;

    async function loadWorkoutHistory() {
    const token = localStorage.getItem('jwtToken');
    
    try {
        const response = await fetch('/api/workouts', {
            headers: { 'Authorization': token }
        });
        
        if (response.ok) {
            const workouts = await response.json();
            
            if (workouts.length === 0) {
                document.getElementById('workout-history').innerHTML = '<p style="color: #6b7280;">No workouts yet. Start your fitness journey today! 💪</p>';
                return;
            }
            
            const html = workouts.map(workout => {
                const lastDone = new Date(workout.completedAt).toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric'
                });
                
                const timesText = workout.completionCount === 1 ? 'time' : 'times';
                
                return `
                    <div class="workout-history-item">
                        <div class="workout-info" onclick='window.openWorkoutModal(${JSON.stringify(JSON.stringify(workout))})'>
                            <strong style="font-size: 1.1rem;">${workout.name}</strong>
                            <br>
                            <small style="color: #6b7280;">
                                Last done: ${lastDone} • 
                                Completed ${workout.completionCount} ${timesText} • 
                                ${workout.exercises.length} exercise${workout.exercises.length !== 1 ? 's' : ''}
                            </small>
                        </div>
                        <div class="workout-actions">
                            <button class="delete-btn" onclick="window.deleteWorkout(${workout.id}, '${workout.name.replace(/'/g, "\\'")}', event)">
                                🗑️ Delete
                            </button>
                            <span class="view-btn" onclick='window.openWorkoutModal(${JSON.stringify(JSON.stringify(workout))})'>→</span>
                        </div>
                    </div>
                `;
            }).join('');
            
            document.getElementById('workout-history').innerHTML = html;
        }
    } catch (error) {
        console.error('Error loading workouts:', error);
        document.getElementById('workout-history').innerHTML = '<p style="color: var(--error);">Failed to load workout history.</p>';
    }
}


    window.openWorkoutModal = function(workoutJson) {
        const workout = JSON.parse(workoutJson);
        currentWorkoutData = workout;
        completedCount = 0;
        
        document.getElementById('modal-workout-name').textContent = workout.name;
        
        const exercisesHtml = workout.exercises.map((ex, index) => {
            let details = '';
            if (ex.sets) details += `${ex.sets} sets`;
            if (ex.reps) details += ` × ${ex.reps} reps`;
            if (ex.weight && ex.weight > 0) details += ` @ ${ex.weight} lbs`;
            if (ex.duration) details += `${ex.duration} minutes`;
            if (ex.distance && ex.distance > 0) details += ` • ${ex.distance} miles`;
            
            return `
                <div class="modal-exercise-item" id="exercise-${index}">
                    <div style="flex: 1;">
                        <h4 style="margin-bottom: 0.25rem;">${ex.name}</h4>
                        <p style="color: #6b7280; margin: 0;">${details}</p>
                    </div>
                    <button class="btn" onclick="window.markExerciseComplete(${index})" id="complete-btn-${index}">
                        ✓ Complete
                    </button>
                </div>
            `;
        }).join('');
        
        document.getElementById('modal-exercises').innerHTML = exercisesHtml;
        document.getElementById('workout-modal').style.display = 'block';
    }

    window.markExerciseComplete = function(index) {
        const exerciseItem = document.getElementById(`exercise-${index}`);
        const button = document.getElementById(`complete-btn-${index}`);
        
        if (exerciseItem && button && !button.disabled) {
            exerciseItem.style.opacity = '0.6';
            exerciseItem.style.background = '#d1fae5';
            button.textContent = '✓ Done';
            button.style.background = 'var(--success)';
            button.disabled = true;
            
            completedCount++;
            
            if (completedCount === currentWorkoutData.exercises.length) {
                setTimeout(async () => {
                    // Mark workout as complete in database
                    const token = localStorage.getItem('jwtToken');
                    try {
                        await fetch(`/api/workouts/${currentWorkoutData.id}/complete`, {
                            method: 'POST',
                            headers: { 'Authorization': token }
                        });
                    } catch (error) {
                        console.error('Error marking workout complete:', error);
                    }
                    
                    showToast('🎉 Workout Complete! Great job! 💪', 'success');
                    closeWorkoutModal();
                    loadWorkoutHistory(); // Reload to show updated count
                }, 500);
            }
        }
    }


    function closeWorkoutModal() {
        document.getElementById('workout-modal').style.display = 'none';
        currentWorkoutData = null;
        completedCount = 0;
    }

    window.closeWorkoutModal = closeWorkoutModal;

    document.getElementById('exercise-category').addEventListener('change', updateExerciseList);
    document.getElementById('exercise-name').addEventListener('change', updateFormFields);
    document.getElementById('workout-form').addEventListener('submit', handleWorkoutSubmit);
    document.getElementById('save-workout-btn').addEventListener('click', saveWorkout);
    
    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    }

    loadWorkoutHistory();
});
</script>
