<div class="page-header">
    <h1>Progress Analytics</h1>
    <p>Visualize your fitness journey with detailed analytics.</p>
</div>

<!-- Summary Stats -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon">üí™</div>
        <div class="stat-content">
            <h3 id="total-workouts">0</h3>
            <p>Total Workouts</p>
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">üèãÔ∏è</div>
        <div class="stat-content">
            <h3 id="total-exercises">0</h3>
            <p>Total Exercises</p>
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-icon">üî•</div>
        <div class="stat-content">
            <h3 id="current-streak">0</h3>
            <p>Day Streak</p>
        </div>
    </div>
</div>

<!-- Activity Calendar and Category Breakdown Side by Side -->
<div class="two-column-grid">
    <div class="card">
        <h3>üìÖ Recent Activity</h3>
        <div id="activity-calendar">
            <p style="text-align: center; color: #6b7280; padding: 2rem;">Loading...</p>
        </div>
    </div>

    <div class="card">
        <h3>üìä Category Breakdown</h3>
        <div id="category-breakdown">
            <p style="text-align: center; color: #6b7280; padding: 2rem;">Loading...</p>
        </div>
    </div>
</div>

<!-- Most Popular Exercises -->
<div class="card">
    <h3>‚≠ê Most Popular Exercises</h3>
    <div id="popular-exercises">
        <p style="text-align: center; color: #6b7280; padding: 2rem;">Loading exercise data...</p>
    </div>
</div>

<!-- Day Detail Modal -->
<div id="day-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modal-day-title">Workouts</h2>
            <span class="close" onclick="closeDayModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div id="modal-day-content"></div>
        </div>
    </div>
</div>

<!-- Category Detail Modal -->
<div id="category-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modal-category-title">Exercises</h2>
            <span class="close" onclick="closeCategoryModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div id="modal-category-content"></div>
        </div>
    </div>
</div>

<style>
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.two-column-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
    align-items: stretch;
}

.two-column-grid .card {
    display: flex;
    flex-direction: column;
}

.two-column-grid .card > h3 {
    flex-shrink: 0;
    margin-bottom: 1rem;
}

.two-column-grid .card > div {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.stat-card {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 10px;
    display: flex;
    align-items: center;
    gap: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s, box-shadow 0.2s;
}

.stat-card:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.stat-icon {
    font-size: 2.5rem;
    line-height: 1;
}

.stat-content h3 {
    margin: 0;
    font-size: 2rem;
    color: var(--primary);
    font-weight: bold;
}

.stat-content p {
    margin: 0.25rem 0 0 0;
    color: #6b7280;
    font-size: 0.9rem;
}

.activity-calendar {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.4rem;
    margin-top: 1rem;
    flex: 1;
}

.activity-day {
    aspect-ratio: 1;
    background: var(--background);
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    transition: all 0.2s;
    cursor: pointer;
    border: 2px solid transparent;
}

.activity-day:hover {
    border-color: var(--primary);
    transform: scale(1.1);
}

.activity-day.has-workout {
    background: linear-gradient(135deg, var(--primary) 0%, #8b5cf6 100%);
    color: white;
    font-weight: bold;
}

.activity-day.future {
    opacity: 0.3;
    cursor: default;
}

.day-label {
    font-size: 0.6rem;
    color: #6b7280;
    margin-bottom: 0.15rem;
}

.activity-day.has-workout .day-label {
    color: rgba(255, 255, 255, 0.8);
}

.day-count {
    font-size: 0.9rem;
    font-weight: bold;
}

.category-chart {
    display: flex;
    flex-direction: column;
    gap: 0;
    margin-top: 1rem;
    flex: 1;
    justify-content: space-between;
}

.category-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.5rem 0.5rem;
    border-radius: 5px;
    transition: background 0.2s;
    flex: 1;
    min-height: 0;
}

.category-item:hover {
    background: var(--background);
}

.category-label {
    min-width: 100px;
    width: 100px;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    flex-shrink: 0;
}

.category-bar-container {
    flex: 1;
    height: auto;
    min-height: 24px;
    background: var(--background);
    border-radius: 14px;
    overflow: hidden;
    position: relative;
    min-width: 0;
}

.category-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--primary) 0%, #8b5cf6 100%);
    border-radius: 14px;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 0.75rem;
    color: white;
    font-weight: bold;
    font-size: clamp(0.65rem, 1.5vw, 0.85rem);
    transition: width 1s ease-out;
    width: 0;
    white-space: nowrap;
}

.category-bar.strength {
    background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);
}

.category-bar.cardio {
    background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
}

.category-bar.flexibility {
    background: linear-gradient(90deg, #10b981 0%, #059669 100%);
}

.category-bar.bodyweight {
    background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%);
}

.category-count {
    min-width: 40px;
    text-align: right;
    font-weight: bold;
    color: var(--primary);
    font-size: 0.9rem;
    flex-shrink: 0;
}

.exercise-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-top: 1rem;
}

.exercise-rank-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    transition: all 0.2s;
}

.exercise-rank-item:hover {
    background: var(--background);
    transform: none;
}

.rank-badge {
    min-width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1rem;
}

.rank-badge.gold {
    background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
    color: white;
}

.rank-badge.silver {
    background: linear-gradient(135deg, #d1d5db 0%, #9ca3af 100%);
    color: white;
}

.rank-badge.bronze {
    background: linear-gradient(135deg, #fb923c 0%, #ea580c 100%);
    color: white;
}

.rank-badge.other {
    background: var(--primary);
    color: white;
}

.exercise-rank-info {
    flex: 1;
}

.exercise-rank-info strong {
    display: block;
    font-size: 1.05rem;
    margin-bottom: 0.25rem;
}

.exercise-rank-info small {
    color: #6b7280;
}

.exercise-rank-count {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    overflow-y: auto;
}

.modal.closing {
    animation: fadeOut 0.3s ease forwards;
    pointer-events: none;
}

.modal.closing .modal-content {
    animation: slideUp 0.3s ease forwards;
}

.modal-content {
    background-color: var(--card-bg);
    margin: 2% auto;
    padding: 0;
    border-radius: 10px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    animation: slideDown 0.3s ease;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
}

@keyframes slideDown {
    from {
        transform: translateY(-50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

@keyframes slideUp {
    from {
        transform: translateY(0);
        opacity: 1;
    }
    to {
        transform: translateY(-50px);
        opacity: 0;
    }
}

.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
}

.modal-header h2 {
    margin: 0;
    color: var(--primary);
}

.close {
    color: #6b7280;
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s;
    line-height: 1;
}

.close:hover {
    color: var(--error);
}

.modal-body {
    padding: 1.5rem;
    overflow-y: auto;
    flex: 1;
}

.workout-detail-item {
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    margin-bottom: 0.75rem;
}

.workout-detail-item h4 {
    margin: 0 0 0.5rem 0;
    color: var(--primary);
}

.workout-detail-item p {
    margin: 0.25rem 0;
    color: #6b7280;
    font-size: 0.9rem;
}

.exercise-detail-item {
    padding: 1rem;
    background: var(--background);
    border-radius: 8px;
    margin-bottom: 0.75rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.exercise-detail-info {
    flex: 1;
}

.exercise-detail-info h4 {
    margin: 0 0 0.25rem 0;
}

.exercise-detail-info small {
    color: #6b7280;
}

.exercise-detail-stats {
    text-align: right;
    color: var(--primary);
    font-weight: bold;
}

@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.stat-card, .card {
    animation: slideInUp 0.5s ease-out backwards;
}

.stat-card:nth-child(1) { animation-delay: 0.1s; }
.stat-card:nth-child(2) { animation-delay: 0.2s; }
.stat-card:nth-child(3) { animation-delay: 0.3s; }

@media (max-width: 768px) {
    .two-column-grid {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    setActiveNav('progress');
    
    const token = localStorage.getItem('jwtToken');
    let workoutsByDay = {};
    let exercisesByCategory = {};
    
    try {
        const statsResponse = await fetch('/api/progress/stats', {
            headers: { 'Authorization': token }
        });
        
        const recordsResponse = await fetch('/api/progress/records', {
            headers: { 'Authorization': token }
        });
        
        if (statsResponse.ok && recordsResponse.ok) {
            const stats = await statsResponse.json();
            const records = await recordsResponse.json();
            
            const workoutsResponse = await fetch('/api/workouts', {
                headers: { 'Authorization': token }
            });
            
            let totalCompletions = 0;
            if (workoutsResponse.ok) {
                const workouts = await workoutsResponse.json();
                totalCompletions = workouts.reduce((sum, w) => sum + (w.completionCount || 0), 0);
                
                displayActivityCalendar(workouts);
            }
            
            animateCounter('total-workouts', totalCompletions);
            animateCounter('total-exercises', stats.total_exercises || 0);
            animateCounter('current-streak', stats.current_streak || 0);
            
            displayCategoryBreakdown(records);
            displayPopularExercises(records);
        }
    } catch (error) {
        console.error('Error loading progress data:', error);
        showNoDataMessage();
    }
    
    function showNoDataMessage() {
        document.getElementById('activity-calendar').innerHTML = 
            '<p style="text-align: center; color: #6b7280; padding: 2rem;">Start tracking workouts to see your progress! üí™</p>';
        document.getElementById('category-breakdown').innerHTML = 
            '<p style="text-align: center; color: #6b7280; padding: 2rem;">No data yet. Complete some workouts!</p>';
    }
    
    function animateCounter(id, target) {
        const element = document.getElementById(id);
        let current = 0;
        const increment = Math.ceil(target / 50);
        const duration = 1000;
        const stepTime = duration / (target / increment);
        
        const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
                element.textContent = target;
                clearInterval(timer);
            } else {
                element.textContent = current;
            }
        }, stepTime);
    }
    
    function displayActivityCalendar(workouts) {
        const container = document.getElementById('activity-calendar');
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const days = [];
        for (let i = 13; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(today.getDate() - i);
            days.push(date);
        }
        
        workoutsByDay = {};
        workouts
            .filter(w => w.completedAt)
            .forEach(w => {
                const date = new Date(w.completedAt);
                date.setHours(0, 0, 0, 0);
                const key = date.getTime();
                if (!workoutsByDay[key]) {
                    workoutsByDay[key] = [];
                }
                workoutsByDay[key].push(w);
            });
        
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        
        const html = `
            <div class="activity-calendar">
                ${days.map(date => {
                    const key = date.getTime();
                    const dayWorkouts = workoutsByDay[key] || [];
                    const count = dayWorkouts.length;
                    const isFuture = date > today;
                    const dayName = dayNames[date.getDay()];
                    const dayNum = date.getDate();
                    
                    return `
                        <div class="activity-day ${count > 0 ? 'has-workout' : ''} ${isFuture ? 'future' : ''}"
                             onclick="${count > 0 ? `openDayModal(${key})` : ''}"
                             title="${date.toLocaleDateString()}: ${count} workout${count !== 1 ? 's' : ''}">
                            <div class="day-label">${dayName}</div>
                            <div class="day-count">${isFuture ? '' : (count || '¬∑')}</div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
        
        container.innerHTML = html;
    }
    
    window.openDayModal = function(dateKey) {
        const workouts = workoutsByDay[dateKey] || [];
        if (workouts.length === 0) return;
        
        const date = new Date(parseInt(dateKey));
        document.getElementById('modal-day-title').textContent = 
            `Workouts on ${date.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}`;
        
        const html = workouts.map(workout => {
            const exerciseList = workout.exercises.map(ex => {
                let details = '';
                if (ex.sets) details += `${ex.sets} sets`;
                if (ex.reps) details += ` √ó ${ex.reps} reps`;
                if (ex.weight && ex.weight > 0) details += ` @ ${ex.weight} lbs`;
                if (ex.duration) details += `${ex.duration} min`;
                if (ex.distance && ex.distance > 0) details += ` ‚Ä¢ ${ex.distance} mi`;
                
                return `<p>‚Ä¢ ${ex.name}: ${details}</p>`;
            }).join('');
            
            return `
                <div class="workout-detail-item">
                    <h4>${workout.name}</h4>
                    ${exerciseList}
                </div>
            `;
        }).join('');
        
        document.getElementById('modal-day-content').innerHTML = html;
        document.getElementById('day-modal').style.display = 'block';
    }
    
    window.closeDayModal = function() {
        const modal = document.getElementById('day-modal');
        if (modal.classList.contains('closing')) return;
        modal.classList.add('closing');
        
        setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.remove('closing');
        }, 300);
    }
    
    function displayCategoryBreakdown(records) {
        const container = document.getElementById('category-breakdown');
        
        const categoryCount = {};
        const categoryIcons = {
            strength: 'üí™',
            cardio: 'üèÉ',
            flexibility: 'üßò',
            bodyweight: 'ü§∏'
        };
        
        exercisesByCategory = {
            strength: [],
            cardio: [],
            flexibility: [],
            bodyweight: []
        };
        
        records.forEach(record => {
            const cat = record.category || 'other';
            categoryCount[cat] = (categoryCount[cat] || 0) + record.times_performed;
            if (exercisesByCategory[cat]) {
                exercisesByCategory[cat].push(record);
            }
        });
        
        const total = Object.values(categoryCount).reduce((sum, count) => sum + count, 0);
        
        if (total === 0) {
            container.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 2rem;">No exercises logged yet.</p>';
            return;
        }
        
        // Find max count for ratio calculation
        const maxCount = Math.max(...Object.values(categoryCount));
        
        const sortedCategories = Object.entries(categoryCount)
            .sort((a, b) => b[1] - a[1]);
        
        const html = `
            <div class="category-chart">
                ${sortedCategories.map(([category, count]) => {
                    const percentage = Math.round((count / total) * 100);
                    const widthRatio = Math.round((count / maxCount) * 100);
                    const icon = categoryIcons[category] || 'üìä';
                    
                    return `
                        <div class="category-item" onclick="openCategoryModal('${category}')">
                            <div class="category-label">
                                <span>${icon}</span>
                                <span>${category.charAt(0).toUpperCase() + category.slice(1)}</span>
                            </div>
                            <div class="category-bar-container">
                                <div class="category-bar ${category}" data-width="${widthRatio}%">
                                    ${percentage}%
                                </div>
                            </div>
                            <div class="category-count">${count}</div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
        
        container.innerHTML = html;
        
        setTimeout(() => {
            document.querySelectorAll('.category-bar').forEach(bar => {
                bar.style.width = bar.dataset.width;
            });
        }, 100);
    }
    
    window.openCategoryModal = function(category) {
        const exercises = exercisesByCategory[category] || [];
        if (exercises.length === 0) return;
        
        const categoryIcons = {
            strength: 'üí™',
            cardio: 'üèÉ',
            flexibility: 'üßò',
            bodyweight: 'ü§∏'
        };
        
        document.getElementById('modal-category-title').textContent = 
            `${categoryIcons[category] || ''} ${category.charAt(0).toUpperCase() + category.slice(1)} Exercises`;
        
        const html = exercises.map(ex => {
            let details = [];
            
            if (category === 'strength') {
                if (ex.max_weight && ex.max_weight > 0) {
                    details.push(`Max Weight: ${ex.max_weight} lbs`);
                }
                if (ex.max_reps && ex.max_reps > 0) {
                    details.push(`Best Reps: ${ex.max_reps}`);
                }
                if (ex.max_sets && ex.max_sets > 0) {
                    details.push(`Most Sets: ${ex.max_sets}`);
                }
            } else if (category === 'cardio') {
                if (ex.longest_duration && ex.longest_duration > 0) {
                    details.push(`Longest: ${ex.longest_duration} min`);
                }
                if (ex.longest_distance && ex.longest_distance > 0) {
                    details.push(`Farthest: ${ex.longest_distance} mi`);
                }
            } else if (category === 'flexibility') {
                if (ex.longest_duration && ex.longest_duration > 0) {
                    details.push(`Longest: ${ex.longest_duration} min`);
                }
            } else if (category === 'bodyweight') {
                if (ex.max_reps && ex.max_reps > 0) {
                    details.push(`Best Reps: ${ex.max_reps}`);
                }
                if (ex.max_sets && ex.max_sets > 0) {
                    details.push(`Most Sets: ${ex.max_sets}`);
                }
                if (ex.longest_duration && ex.longest_duration > 0) {
                    details.push(`Longest: ${ex.longest_duration} min`);
                }
            }
            
            return `
                <div class="exercise-detail-item">
                    <div class="exercise-detail-info">
                        <h4>${ex.exercise_name}</h4>
                        ${details.length > 0 ? `<small style="color: var(--primary);">${details.join(' ‚Ä¢ ')}</small>` : '<small style="color: #6b7280;">No records yet</small>'}
                    </div>
                    <div class="exercise-detail-stats">
                        ${ex.times_performed}√ó
                    </div>
                </div>
            `;
        }).join('');
        
        document.getElementById('modal-category-content').innerHTML = html;
        document.getElementById('category-modal').style.display = 'block';
    }
    
    window.closeCategoryModal = function() {
        const modal = document.getElementById('category-modal');
        if (modal.classList.contains('closing')) return;
        modal.classList.add('closing');
        
        setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.remove('closing');
        }, 300);
    }
    
    function displayPopularExercises(records) {
        const container = document.getElementById('popular-exercises');
        
        if (records.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 2rem;">No exercises yet!</p>';
            return;
        }
        
        const sorted = records
            .sort((a, b) => b.times_performed - a.times_performed)
            .slice(0, 5);
        
        const html = `
            <div class="exercise-list">
                ${sorted.map((record, index) => {
                    let badgeClass = 'other';
                    if (index === 0) badgeClass = 'gold';
                    else if (index === 1) badgeClass = 'silver';
                    else if (index === 2) badgeClass = 'bronze';
                    
                    return `
                        <div class="exercise-rank-item">
                            <div class="rank-badge ${badgeClass}">${index + 1}</div>
                            <div class="exercise-rank-info">
                                <strong>${record.exercise_name}</strong>
                            </div>
                            <div class="exercise-rank-count">${record.times_performed}</div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
        
        container.innerHTML = html;
    }
    
    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            if (event.target.classList.contains('closing')) return;
            event.target.classList.add('closing');
            
            setTimeout(() => {
                event.target.style.display = 'none';
                event.target.classList.remove('closing');
            }, 300);
        }
    }
});
</script>
